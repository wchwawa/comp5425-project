---
description: 
globs: 
alwaysApply: false
---
# Alpha Vantage API TypeScript 类型定义

本文档提供了 Alpha Vantage API NEWS_SENTIMENT 端点响应的 TypeScript 类型定义，可用于在项目中正确处理 API 返回的数据。

## 定义位置

这些类型定义应该位于 `types/alphavantage.ts` 文件中。

## 类型定义

```typescript
export namespace AlphaVantage {
  export interface NewsSentimentResponse {
    items: number;
    sentiment_score_definition: string;
    relevance_score_definition: string;
    feed: NewsItem[];
  }

  export interface NewsItem {
    title: string;
    url: string;
    time_published: string; // 格式: YYYYMMDDTHHMMSS
    authors: string[];
    summary: string;
    banner_image: string;
    source: string;
    category_within_source: string;
    source_domain: string;
    topics: Topic[];
    overall_sentiment_score: number;
    overall_sentiment_label: SentimentLabel;
    ticker_sentiment: TickerSentiment[];
  }

  export interface Topic {
    topic: string;
    relevance_score: number; // 0-1 范围
  }

  export interface TickerSentiment {
    ticker: string;
    relevance_score: number; // 0-1 范围
    ticker_sentiment_score: number; // 通常为 -1 到 1 范围
    ticker_sentiment_label: SentimentLabel;
  }

  export type SentimentLabel = 
    | 'Bearish' 
    | 'Somewhat-Bearish' 
    | 'Neutral' 
    | 'Somewhat-Bullish' 
    | 'Bullish';
  
  // 用于 API 请求的参数类型
  export interface NewsSentimentParams {
    function: 'NEWS_SENTIMENT';
    tickers: string; // 逗号分隔的股票代码
    topics?: string; // 可选，逗号分隔的主题
    time_from?: string; // 可选，格式: YYYYMMDDTHHMM
    time_to?: string; // 可选，格式: YYYYMMDDTHHMM
    sort?: 'LATEST' | 'RELEVANCE' | 'EARLIEST'; // 可选
    limit?: number; // 可选，默认 50
    apikey: string;
  }
}

// 使用示例：
// import { AlphaVantage } from 'types/alphavantage';
//
// async function fetchNews(ticker: string): Promise<AlphaVantage.NewsSentimentResponse> {
//   // API 调用实现
// }
```

## 使用这些类型的示例

```typescript
import { AlphaVantage } from '../types/alphavantage';

export async function getNewsSentiment(
  ticker: string, 
  limit: number = 10
): Promise<AlphaVantage.NewsSentimentResponse> {
  const apiKey = process.env.ALPHA_VANTAGE_API_KEY as string;
  
  const params: Partial<AlphaVantage.NewsSentimentParams> = {
    function: 'NEWS_SENTIMENT',
    tickers: ticker,
    limit,
    apikey: apiKey
  };
  
  const queryString = Object.entries(params)
    .map(([key, value]) => `${key}=${value}`)
    .join('&');
    
  const url = `https://www.alphavantage.co/query?${queryString}`;
  
  const response = await fetch(url);
  
  if (!response.ok) {
    throw new Error(`API error: ${response.status}`);
  }
  
  return response.json() as Promise<AlphaVantage.NewsSentimentResponse>;
}
```

## 处理日期字段

Alpha Vantage 返回的日期格式 `YYYYMMDDTHHMMSS` 需要转换为更易读的格式：

```typescript
function formatAlphaVantageDate(dateString: string): Date {
  // 从 "YYYYMMDDTHHMMSS" 解析
  const year = parseInt(dateString.substring(0, 4));
  const month = parseInt(dateString.substring(4, 6)) - 1; // 月份从0开始
  const day = parseInt(dateString.substring(6, 8));
  const hour = parseInt(dateString.substring(9, 11));
  const minute = parseInt(dateString.substring(11, 13));
  const second = parseInt(dateString.substring(13, 15));
  
  return new Date(Date.UTC(year, month, day, hour, minute, second));
}
```
