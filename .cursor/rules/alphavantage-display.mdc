---
description:
globs:
alwaysApply: false
---
# Alpha Vantage 新闻数据的前端展示

本文档描述如何在前端展示从 Alpha Vantage API 获取的新闻情绪数据。

## 组件结构

```
components/
  |-- NewsCard/
  |     |-- NewsCard.tsx   # 新闻卡片组件
  |     |-- index.ts
  |-- NewsList/
  |     |-- NewsList.tsx   # 新闻列表组件
  |     |-- index.ts
  |-- SentimentBadge/
  |     |-- SentimentBadge.tsx   # 情绪标签组件
  |     |-- index.ts
```

## 新闻卡片组件

`NewsCard.tsx` 组件用于展示单个新闻项目：

```tsx
import React from 'react';
import { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';
import Image from 'next/image';
import { Badge } from '@/components/ui/badge';
import { AlphaVantage } from '@/types/alphavantage';
import { formatDate } from '@/utils/date';

interface NewsCardProps {
  newsItem: AlphaVantage.NewsItem;
}

export function NewsCard({ newsItem }: NewsCardProps) {
  const {
    title,
    summary,
    time_published,
    url,
    banner_image,
    source,
    overall_sentiment_label,
    overall_sentiment_score
  } = newsItem;

  // 根据情绪标签设置颜色
  const getSentimentColor = () => {
    switch (overall_sentiment_label) {
      case 'Bearish':
        return 'bg-red-500';
      case 'Somewhat-Bearish':
        return 'bg-orange-500';
      case 'Neutral':
        return 'bg-gray-500';
      case 'Somewhat-Bullish':
        return 'bg-blue-500';
      case 'Bullish':
        return 'bg-green-500';
      default:
        return 'bg-gray-500';
    }
  };

  return (
    <Card className="overflow-hidden hover:shadow-lg transition-shadow">
      <div className="relative h-48 w-full">
        {banner_image ? (
          <Image
            src={banner_image}
            alt={title}
            fill
            className="object-cover"
          />
        ) : (
          <div className="bg-gray-200 h-full w-full flex items-center justify-center">
            <span className="text-gray-500">No image available</span>
          </div>
        )}
      </div>
      
      <CardHeader>
        <div className="flex justify-between items-start">
          <h3 className="text-lg font-semibold line-clamp-2">{title}</h3>
          <Badge className={`${getSentimentColor()} text-white`}>
            {overall_sentiment_label}
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent>
        <p className="text-sm text-gray-600 line-clamp-3">{summary}</p>
      </CardContent>
      
      <CardFooter className="flex justify-between items-center">
        <div className="text-xs text-gray-500">
          {formatDate(time_published)} | {source}
        </div>
        <a 
          href={url} 
          target="_blank" 
          rel="noopener noreferrer"
          className="text-sm text-blue-600 hover:underline"
        >
          阅读更多
        </a>
      </CardFooter>
    </Card>
  );
}
```

## 新闻列表组件

`NewsList.tsx` 组件用于展示新闻列表：

```tsx
import React from 'react';
import { NewsCard } from '@/components/NewsCard';
import { AlphaVantage } from '@/types/alphavantage';

interface NewsListProps {
  newsItems: AlphaVantage.NewsItem[];
  isLoading?: boolean;
}

export function NewsList({ newsItems, isLoading = false }: NewsListProps) {
  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {Array(6).fill(0).map((_, idx) => (
          <div key={idx} className="h-96 bg-gray-200 animate-pulse rounded-lg"></div>
        ))}
      </div>
    );
  }
  
  if (!newsItems || newsItems.length === 0) {
    return (
      <div className="text-center py-12">
        <p className="text-lg text-gray-600">暂无相关新闻</p>
      </div>
    );
  }
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {newsItems.map((item, idx) => (
        <NewsCard key={idx} newsItem={item} />
      ))}
    </div>
  );
}
```

## 情绪标签组件

`SentimentBadge.tsx` 组件用于显示情绪标签：

```tsx
import React from 'react';
import { Badge } from '@/components/ui/badge';
import { AlphaVantage } from '@/types/alphavantage';

interface SentimentBadgeProps {
  label: AlphaVantage.SentimentLabel;
  score?: number;
  showScore?: boolean;
  size?: 'sm' | 'md' | 'lg';
}

export function SentimentBadge({ 
  label, 
  score, 
  showScore = false,
  size = 'md'
}: SentimentBadgeProps) {
  const getColor = () => {
    switch (label) {
      case 'Bearish':
        return 'bg-red-500 text-white';
      case 'Somewhat-Bearish':
        return 'bg-orange-500 text-white';
      case 'Neutral':
        return 'bg-gray-500 text-white';
      case 'Somewhat-Bullish':
        return 'bg-blue-500 text-white';
      case 'Bullish':
        return 'bg-green-500 text-white';
      default:
        return 'bg-gray-500 text-white';
    }
  };
  
  const getSize = () => {
    switch (size) {
      case 'sm': return 'text-xs px-2 py-0.5';
      case 'md': return 'text-sm px-2.5 py-0.5';
      case 'lg': return 'text-base px-3 py-1';
      default: return 'text-sm px-2.5 py-0.5';
    }
  };
  
  return (
    <Badge className={`${getColor()} ${getSize()}`}>
      {label}
      {showScore && score !== undefined && ` (${score.toFixed(2)})`}
    </Badge>
  );
}
```

## 使用示例

```tsx
import { useState, useEffect } from 'react';
import { NewsList } from '@/components/NewsList';
import { AlphaVantage } from '@/types/alphavantage';
import { getNewsSentiment } from '@/services/alpha-vantage';

export default function StockNewsPage() {
  const [ticker, setTicker] = useState('AAPL');
  const [newsData, setNewsData] = useState<AlphaVantage.NewsItem[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);
      try {
        const response = await getNewsSentiment(ticker);
        setNewsData(response.feed);
      } catch (error) {
        console.error('Failed to fetch news:', error);
      } finally {
        setIsLoading(false);
      }
    }
    
    fetchData();
  }, [ticker]);
  
  return (
    <div className="container mx-auto py-8">
      <h1 className="text-2xl font-bold mb-6">{ticker} 相关新闻</h1>
      <NewsList newsItems={newsData} isLoading={isLoading} />
    </div>
  );
}
```

## 过滤和排序新闻

可以根据情绪分数或相关性进行过滤：

```tsx
// 过滤出积极情绪的新闻
const bullishNews = newsData.filter(
  item => item.overall_sentiment_label === 'Bullish' || 
          item.overall_sentiment_label === 'Somewhat-Bullish'
);

// 根据情绪分数排序
const sortedByScore = [...newsData].sort(
  (a, b) => b.overall_sentiment_score - a.overall_sentiment_score
);
```
